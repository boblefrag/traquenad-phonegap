/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var itemsLoad = function(items){
    // given a list of place objects, return an html table
    return "<table></table>"
}


var myplaces = {
    load: function(){
        console.log("Loading Myplaces");
        console.log(itemsLoad([]))
    },
};

var placeNear = {
    load: function(){
        console.log("Place near the point");
        navigator.geolocation.getCurrentPosition(this.location.onSuccess,
                                                 this.location.onError)
    },
    location: {
        onSuccess: function(position){
            console.log("latitude", position.coords.latitude);
            console.log("longitude", position.coords.longitude);
            console.log("else", position.coords);
            // once position is ok, load the places from the api
        },
        onError: function(){
            console.log("error")
            // make a meaningfull error log
        }
    }
};

var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    actionDict: {
        "myplaces": myplaces,
        "places-near": placeNear,
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
        menuItems = document.getElementsByClassName("menu-item");
        for(var i=0;i< menuItems.length;i++){
            menuItems[i].addEventListener("click", this.menuClick, false)
        }
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicity call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        app.receivedEvent('deviceready');
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id)
        document.getElementById("loader").setAttribute('style', 'display:none');
        document.getElementById("app").setAttribute('style', 'display:block');
    },

    menuLoad: function(obj){
        this.actionDict[obj.getAttribute("id")].load()
    },

    menuClick: function(e){
        app.menuLoad(this);
    }

};

